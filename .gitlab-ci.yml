# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

stages:
  - gitlab-test
  - lint
  - sonarqube-check
  - molecule

###############################################################################
#################### actions
###############################################################################

variables:
  ANSIBLE_FORCE_COLOR: "true"
  PY_COLORS: "1"
  #
  SONAR_HOST_URL: "$SONARQUBE_ADDRESS"
  SONAR_TOKEN: "$GITLAB_CI_SONARQUBE_USER_TOKEN"
  #
  DOCKER_IMAGE__ANALYSE_SONAR_SCANNER: "labocbz/analyse-sonar-scanner:latest"
  DOCKER_IMAGE__LINT_SECRETS: "labocbz/lint-secrets:latest"
  DOCKER_IMAGE__LINT_ANSIBLE: "labocbz/lint-ansible:latest"
  DOCKER_IMAGE__LINT_YAML: "labocbz/lint-yaml:latest"
  DOCKER_IMAGE__LINT_JINJA: "labocbz/lint-jinja:latest"
  DOCKER_IMAGE__LINT_MARKDOWN: "labocbz/lint-markdown:latest"
  DOCKER_IMAGE__RUN_ANSIBLE_MOLECULE: "labocbz/run-ansible-molecule:latest"
  DOCKER_IMAGE__ANSIBLETEST_DEBIAN_11: "labocbz/ansibletest-debian-11:latest"
  DOCKER_IMAGE__ANSIBLETEST_DEBIAN_12: "labocbz/ansibletest-debian-12:latest"
  DOCKER_IMAGE__ANSIBLETEST_UBUNTU_22: "labocbz/ansibletest-ubuntu-22:latest"
  DOCKER_IMAGE__ANSIBLETEST_DOCKER_DIND: "labocbz/ansibletest-docker-dind:latest"

###############################################################################
#################### EXTENDABLES
###############################################################################

.molecule_test: &molecule_test
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__RUN_ANSIBLE_MOLECULE
  stage: molecule
  before_script:
    - "export DOCKER_CLIENT_TIMEOUT=180"
    - "export COMPOSE_HTTP_TIMEOUT=180"
    - "docker login -u \"$GITLAB_CI_NEXUS_CREDENTIALS_USR\" -p \"$GITLAB_CI_NEXUS_CREDENTIALS_PSW\" \"http://$NEXUS_DOCKER_GROUP_REGISTRY\""
    - "python3 -m compileall /usr/lib/python3 -qq"
    - "cp ./.ansible.cfg /root/.ansible.cfg"
    - "[ -f \"./molecule/$SCENARIO/requirements.yml\" ] && ansible-galaxy install -r ./molecule/$SCENARIO/requirements.yml --roles-path=./molecule/$SCENARIO/roles"
  script:
    - "molecule test --scenario-name $SCENARIO"
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_MESSAGE=~/^[^Merge]/ && $CI_COMMIT_BRANCH == "develop"'
  needs:
    - "lint:yaml"
    - "lint:jinja"
    - "lint:ansible"
    - "lint:markdown"

###############################################################################
#################### CICD
###############################################################################

# As a GitLab ci, we use the default template :)
sast:
  stage: gitlab-test
include:
  - template: Security/SAST.gitlab-ci.yml

lint:yaml:
  stage: lint
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__LINT_YAML
  script:
    - yamllint --list-files ./
    - yamllint -c ./.yamllint ./
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_MESSAGE=~/^[^Merge]/ && $CI_COMMIT_BRANCH == "develop"'

lint:jinja:
  stage: lint
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__LINT_JINJA
  script:
    - "[ -n \"$(find ./templates -name '*.j2')\" ] && j2lint ./templates/*.j2 --ignore S3 S7"
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_MESSAGE=~/^[^Merge]/ && $CI_COMMIT_BRANCH == "develop"'

lint:ansible:
  stage: lint
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__LINT_ANSIBLE
  script:
    - ansible-lint --config=./.ansible-lint --exclude molecule --exclude tests ./*
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_MESSAGE=~/^[^Merge]/ && $CI_COMMIT_BRANCH == "develop"'

lint:markdown:
  stage: lint
  image: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__LINT_MARKDOWN

  script:
    - markdownlint './README.md' --disable MD013
  allow_failure: false
  rules:
    - if: '$CI_COMMIT_MESSAGE=~/^[^Merge]/ && $CI_COMMIT_BRANCH == "develop"'

molecule:test-debian-12:
  <<: *molecule_test
  variables:
    SCENARIO: "cicd-debian-12"
  rules:
    - if: '$CI_COMMIT_MESSAGE=~/^[^Merge]/ && $CI_COMMIT_BRANCH == "develop"'

molecule:test-ubuntu-22:
  <<: *molecule_test
  variables:
    SCENARIO: "cicd-ubuntu-22"
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_MESSAGE=~/^[^Merge]/ && $CI_COMMIT_BRANCH == "develop"'

molecule:test-debian-11:
  <<: *molecule_test
  variables:
    SCENARIO: "cicd-debian-11"
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_MESSAGE=~/^[^Merge]/ && $CI_COMMIT_BRANCH == "develop"'

sonarqube-check:
  stage: sonarqube-check
  image: 
    name: $NEXUS_DOCKER_GROUP_REGISTRY/$DOCKER_IMAGE__ANALYSE_SONAR_SCANNER
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - ".sonar/cache"
  script: 
    - "sonar-scanner"
  rules:
    - if: '$CI_COMMIT_MESSAGE=~/^[^Merge]/ && $CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_COMMIT_BRANCH == "main"'
